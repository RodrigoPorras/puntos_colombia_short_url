// Mocks generated by Mockito 5.4.0 from annotations
// in puntos_colombia_short_url/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bloc/bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:puntos_colombia_short_url/src/domain/models/repositories/clean_uri_api_repository.dart'
    as _i5;
import 'package:puntos_colombia_short_url/src/domain/models/repositories/database_repository.dart'
    as _i8;
import 'package:puntos_colombia_short_url/src/domain/models/responses/clean_uri_response.dart'
    as _i7;
import 'package:puntos_colombia_short_url/src/domain/models/short_url.dart'
    as _i9;
import 'package:puntos_colombia_short_url/src/presentation/cubits/clean_uri/clean_uri_cubit.dart'
    as _i4;
import 'package:puntos_colombia_short_url/src/presentation/cubits/local_short_urls/local_short_urls_cubit.dart'
    as _i3;
import 'package:puntos_colombia_short_url/src/utils/resources/data_state.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalShortUrlsState_1 extends _i1.SmartFake
    implements _i3.LocalShortUrlsState {
  _FakeLocalShortUrlsState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCleanUriState_2 extends _i1.SmartFake implements _i4.CleanUriState {
  _FakeCleanUriState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CleanUriApiRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCleanUriApiRepository extends _i1.Mock
    implements _i5.CleanUriApiRepository {
  MockCleanUriApiRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.DataState<_i7.CleanUriResponse>> shortenUrl(
          {required String? url}) =>
      (super.noSuchMethod(
        Invocation.method(
          #shortenUrl,
          [],
          {#url: url},
        ),
        returnValue: _i6.Future<_i2.DataState<_i7.CleanUriResponse>>.value(
            _FakeDataState_0<_i7.CleanUriResponse>(
          this,
          Invocation.method(
            #shortenUrl,
            [],
            {#url: url},
          ),
        )),
      ) as _i6.Future<_i2.DataState<_i7.CleanUriResponse>>);
}

/// A class which mocks [DatabaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseRepository extends _i1.Mock
    implements _i8.DatabaseRepository {
  MockDatabaseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i9.ShortUrl>> getUrlsHistory() => (super.noSuchMethod(
        Invocation.method(
          #getUrlsHistory,
          [],
        ),
        returnValue: _i6.Future<List<_i9.ShortUrl>>.value(<_i9.ShortUrl>[]),
      ) as _i6.Future<List<_i9.ShortUrl>>);
  @override
  _i6.Future<void> saveShortUrl(_i9.ShortUrl? shortUrl) => (super.noSuchMethod(
        Invocation.method(
          #saveShortUrl,
          [shortUrl],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [LocalShortUrlsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalShortUrlsCubit extends _i1.Mock
    implements _i3.LocalShortUrlsCubit {
  @override
  _i3.LocalShortUrlsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLocalShortUrlsState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeLocalShortUrlsState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.LocalShortUrlsState);
  @override
  _i6.Stream<_i3.LocalShortUrlsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.LocalShortUrlsState>.empty(),
        returnValueForMissingStub: _i6.Stream<_i3.LocalShortUrlsState>.empty(),
      ) as _i6.Stream<_i3.LocalShortUrlsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.Future<void> getAllSavedShortUrls() => (super.noSuchMethod(
        Invocation.method(
          #getAllSavedShortUrls,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> saveShortUrl({required _i9.ShortUrl? shortUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveShortUrl,
          [],
          {#shortUrl: shortUrl},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void emit(_i3.LocalShortUrlsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i10.Change<_i3.LocalShortUrlsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [CleanUriCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCleanUriCubit extends _i1.Mock implements _i4.CleanUriCubit {
  @override
  _i4.CleanUriState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCleanUriState_2(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeCleanUriState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.CleanUriState);
  @override
  _i6.Stream<_i4.CleanUriState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.CleanUriState>.empty(),
        returnValueForMissingStub: _i6.Stream<_i4.CleanUriState>.empty(),
      ) as _i6.Stream<_i4.CleanUriState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.Future<void> shortenUrl({required String? url}) => (super.noSuchMethod(
        Invocation.method(
          #shortenUrl,
          [],
          {#url: url},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void emit(_i4.CleanUriState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i10.Change<_i4.CleanUriState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
